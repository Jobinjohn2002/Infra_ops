name: Generate Runbook with Diagram

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate-runbook:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3 # Use a more recent version of checkout

      - name: Setup Node.js
        uses: actions/setup-node@v3 # Use setup-node action for Node.js environment
        with:
          node-version: '18' # Specify a recent Node.js version, e.g., 18 or 20

      - name: Install Mermaid CLI and Puppeteer dependencies
        run: |
          npm install -g @mermaid-js/mermaid-cli
          # Install system dependencies required by Puppeteer (headless browser)
          sudo apt-get update
          sudo apt-get install -y libnss3 libatk-bridge2.0-0 libgtk-3-0 libxss1 libasound2t64 # Corrected libasound2 to libasound2t64

      - name: Generate runbook from Gemini
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=$GEMINI_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "contents": [
                {
                  "parts": [
                    {"text": "Generate a detailed Markdown runbook for an Azure WebApp CPU alert and auto-recovery workflow. The alert triggers when CPU usage goes above 10%. The auto-recovery is handled by an Azure Function that restarts the WebApp. Include symptoms, troubleshooting, auto-remediation, and logs sections."}
                  ]
                }
              ]
            }')

          echo "$RESPONSE" > response.json
          RUNBOOK_TEXT=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text')
          echo "$RUNBOOK_TEXT" > README.md

      - name: Generate Mermaid diagram from Gemini
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          DIAGRAM_RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=$GEMINI_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "contents": [
                {
                  "parts": [
                    {"text": "Generate a Mermaid diagram for an Azure WebApp monitored for high CPU usage. When CPU exceeds 10%, an Azure Monitor alert triggers an Azure Function to restart the WebApp. Include Azure Monitor, Action Group, Function App, App Service, and optional Logic App. Provide only the mermaid diagram code, without any extra text or explanation."}
                  ]
                }
              ]
            }')

          echo "$DIAGRAM_RESPONSE" > diagram_response.json

          # Extract only the Mermaid diagram block (e.g., '```mermaid ... ```')
          # and remove the surrounding backticks and 'mermaid' identifier.
          # This assumes Gemini returns the diagram within a markdown code block.
          echo "$DIAGRAM_RESPONSE" | jq -r '.candidates[0].content.parts[0].text' | \
          grep -Pzo '(?s)```mermaid\n(.*?)\n```' | \
          sed -E 's/```mermaid\n//g; s/\n```//g' > diagram.mmd

      # IMPORTANT: This step *must* come before the "Generate PNG from Mermaid" step
      - name: Create Puppeteer config for mmdc
        run: |
          # The executablePath might vary depending on how Puppeteer installs Chrome/Chromium.
          # /usr/bin/google-chrome-stable is a common default for a system-installed Chrome.
          # Alternatively, you can omit executablePath and let Puppeteer download its own default.
          # For GitHub Actions, often /usr/bin/google-chrome-stable or just letting Puppeteer handle it works.
          echo '{ "executablePath": "/usr/bin/google-chrome-stable", "args": ["--no-sandbox", "--disable-setuid-sandbox"] }' > puppeteer-config.json


      - name: Generate PNG from Mermaid
        run: |
          # Use the puppeteerConfigFile to pass arguments and executable path
          # -p is usually for specifying the executable path directly, but with a config file,
          # the config file typically takes precedence for executablePath if specified there.
          # For clarity, I'm keeping -p here, but it's redundant if executablePath is in the config.
          # The key is that the config file contains --no-sandbox.
          mmdc -i diagram.mmd -o diagram.png --puppeteerConfigFile ./puppeteer-config.json

      - name: Embed image in README
        run: |
          echo -e "\n## Architecture Diagram\n\n![Diagram](diagram.png)" >> README.md

      - name: Commit and push changes
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add README.md diagram.*
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Auto-generated runbook with diagram image"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
