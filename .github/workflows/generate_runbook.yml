name: Generate Runbook with Diagram

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate-runbook:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3 # Use a more recent version of checkout

      - name: Setup Node.js
        uses: actions/setup-node@v3 # Use setup-node action
        with:
          node-version: '18' # Specify a recent Node.js version

      - name: Install Mermaid CLI and Puppeteer dependencies
        run: |
          npm install -g @mermaid-js/mermaid-cli
          # Install Puppeteer's browser dependencies - this is crucial
          sudo apt-get update
          sudo apt-get install -y libnss3 libatk-bridge2.0-0 libgtk-3-0 libxss1 libasound2t64

      - name: Generate runbook from Gemini
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=$GEMINI_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "contents": [
                {
                  "parts": [
                    {"text": "Generate a detailed Markdown runbook for an Azure WebApp CPU alert and auto-recovery workflow. The alert triggers when CPU usage goes above 10%. The auto-recovery is handled by an Azure Function that restarts the WebApp. Include symptoms, troubleshooting, auto-remediation, and logs sections."}
                  ]
                }
              ]
            }')

          echo "$RESPONSE" > response.json
          RUNBOOK_TEXT=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text')
          echo "$RUNBOOK_TEXT" > README.md

      - name: Generate Mermaid diagram from Gemini
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          DIAGRAM_RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=$GEMINI_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "contents": [
                {
                  "parts": [
                    {"text": "Generate a Mermaid diagram for an Azure WebApp monitored for high CPU usage. When CPU exceeds 10%, an Azure Monitor alert triggers an Azure Function to restart the WebApp. Include Azure Monitor, Action Group, Function App, App Service, and optional Logic App."}
                  ]
                }
              ]
            }')

          echo "$DIAGRAM_RESPONSE" > diagram_response.json
          echo "$DIAGRAM_RESPONSE" | jq -r '.candidates[0].content.parts[0].text' > diagram.mmd

      - name: Create Puppeteer config for mmdc
        # This step must run BEFORE "Generate PNG from Mermaid"
        run: |
          echo '{ "executablePath": "/usr/bin/google-chrome-stable", "args": ["--no-sandbox", "--disable-setuid-sandbox"] }' > puppeteer-config.json

      - name: Generate PNG from Mermaid
        run: |
          # The puppeteer-config.json file now exists when mmdc runs
          mmdc -i diagram.mmd -o diagram.png -p /usr/bin/google-chrome-stable --puppeteerConfigFile ./puppeteer-config.json

      - name: Embed image in README
        run: |
          echo -e "\n## Architecture Diagram\n\n![Diagram](diagram.png)" >> README.md

      - name: Commit and push changes
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add README.md diagram.*
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Auto-generated runbook with diagram image"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
